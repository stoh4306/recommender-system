// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vecsearch.proto

#include "vecsearch.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace vecsearchgrpc {
template <typename>
PROTOBUF_CONSTEXPR CreateIndexRequest::CreateIndexRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vecdata_)*/ {}

  , /*decltype(_impl_.indexname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.numvectors_)*/ ::uint64_t{0u}

  , /*decltype(_impl_.dim_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateIndexRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateIndexRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateIndexRequestDefaultTypeInternal() {}
  union {
    CreateIndexRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SearchRequest::SearchRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vecdata_)*/ {}

  , /*decltype(_impl_.indexname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.numqueryvectors_)*/ 0u

  , /*decltype(_impl_.dim_)*/ 0u

  , /*decltype(_impl_.numneighbors_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchRequestDefaultTypeInternal() {}
  union {
    SearchRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR SearchReply::SearchReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.i_)*/ {}
  ,/* _impl_._i_cached_byte_size_ = */ { 0 }

  , /*decltype(_impl_.d_)*/ {}

  , /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.numqueryvectors_)*/ 0u

  , /*decltype(_impl_.numneighbors_)*/ 0u

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchReplyDefaultTypeInternal() {}
  union {
    SearchReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DefaultRequest::DefaultRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.indexname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DefaultRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultRequestDefaultTypeInternal() {}
  union {
    DefaultRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultRequestDefaultTypeInternal _DefaultRequest_default_instance_;
template <typename>
PROTOBUF_CONSTEXPR DefaultReply::DefaultReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DefaultReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DefaultReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DefaultReplyDefaultTypeInternal() {}
  union {
    DefaultReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DefaultReplyDefaultTypeInternal _DefaultReply_default_instance_;
}  // namespace vecsearchgrpc
static ::_pb::Metadata file_level_metadata_vecsearch_2eproto[5];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_vecsearch_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_vecsearch_2eproto = nullptr;
const ::uint32_t TableStruct_vecsearch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::CreateIndexRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::CreateIndexRequest, _impl_.indexname_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::CreateIndexRequest, _impl_.numvectors_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::CreateIndexRequest, _impl_.dim_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::CreateIndexRequest, _impl_.vecdata_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchRequest, _impl_.indexname_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchRequest, _impl_.numqueryvectors_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchRequest, _impl_.dim_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchRequest, _impl_.vecdata_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchRequest, _impl_.numneighbors_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _impl_.message_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _impl_.numqueryvectors_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _impl_.numneighbors_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _impl_.i_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::SearchReply, _impl_.d_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::DefaultRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::DefaultRequest, _impl_.indexname_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::DefaultReply, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::DefaultReply, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::vecsearchgrpc::DefaultReply, _impl_.message_),
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        { 0, -1, -1, sizeof(::vecsearchgrpc::CreateIndexRequest)},
        { 12, -1, -1, sizeof(::vecsearchgrpc::SearchRequest)},
        { 25, -1, -1, sizeof(::vecsearchgrpc::SearchReply)},
        { 39, -1, -1, sizeof(::vecsearchgrpc::DefaultRequest)},
        { 48, -1, -1, sizeof(::vecsearchgrpc::DefaultReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::vecsearchgrpc::_CreateIndexRequest_default_instance_._instance,
    &::vecsearchgrpc::_SearchRequest_default_instance_._instance,
    &::vecsearchgrpc::_SearchReply_default_instance_._instance,
    &::vecsearchgrpc::_DefaultRequest_default_instance_._instance,
    &::vecsearchgrpc::_DefaultReply_default_instance_._instance,
};
const char descriptor_table_protodef_vecsearch_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017vecsearch.proto\022\rvecsearchgrpc\"Y\n\022Crea"
    "teIndexRequest\022\021\n\tindexName\030\001 \001(\t\022\022\n\nnum"
    "Vectors\030\002 \001(\004\022\013\n\003dim\030\003 \001(\r\022\017\n\007vecData\030\004 "
    "\003(\002\"o\n\rSearchRequest\022\021\n\tindexName\030\001 \001(\t\022"
    "\027\n\017numQueryVectors\030\002 \001(\r\022\013\n\003dim\030\003 \001(\r\022\017\n"
    "\007vecData\030\004 \003(\002\022\024\n\014numNeighbors\030\005 \001(\r\"s\n\013"
    "SearchReply\022\016\n\006status\030\001 \001(\t\022\017\n\007message\030\002"
    " \001(\t\022\027\n\017numQueryVectors\030\003 \001(\r\022\024\n\014numNeig"
    "hbors\030\004 \001(\r\022\t\n\001I\030\005 \003(\r\022\t\n\001D\030\006 \003(\002\"#\n\016Def"
    "aultRequest\022\021\n\tindexName\030\001 \001(\t\"/\n\014Defaul"
    "tReply\022\016\n\006status\030\001 \001(\t\022\017\n\007message\030\002 \001(\t2"
    "\217\003\n\020VectorSearchGrpc\022M\n\013createIndex\022!.ve"
    "csearchgrpc.CreateIndexRequest\032\033.vecsear"
    "chgrpc.DefaultReply\022I\n\013deleteIndex\022\035.vec"
    "searchgrpc.DefaultRequest\032\033.vecsearchgrp"
    "c.DefaultReply\022G\n\tloadIndex\022\035.vecsearchg"
    "rpc.DefaultRequest\032\033.vecsearchgrpc.Defau"
    "ltReply\022I\n\013unloadIndex\022\035.vecsearchgrpc.D"
    "efaultRequest\032\033.vecsearchgrpc.DefaultRep"
    "ly\022M\n\017searchNeighbors\022\034.vecsearchgrpc.Se"
    "archRequest\032\032.vecsearchgrpc.SearchReply\""
    "\000b\006proto3"
};
static ::absl::once_flag descriptor_table_vecsearch_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_vecsearch_2eproto = {
    false,
    false,
    849,
    descriptor_table_protodef_vecsearch_2eproto,
    "vecsearch.proto",
    &descriptor_table_vecsearch_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_vecsearch_2eproto::offsets,
    file_level_metadata_vecsearch_2eproto,
    file_level_enum_descriptors_vecsearch_2eproto,
    file_level_service_descriptors_vecsearch_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_vecsearch_2eproto_getter() {
  return &descriptor_table_vecsearch_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_vecsearch_2eproto(&descriptor_table_vecsearch_2eproto);
namespace vecsearchgrpc {
// ===================================================================

class CreateIndexRequest::_Internal {
 public:
};

CreateIndexRequest::CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vecsearchgrpc.CreateIndexRequest)
}
CreateIndexRequest::CreateIndexRequest(const CreateIndexRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateIndexRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vecdata_) { from._impl_.vecdata_ }

    , decltype(_impl_.indexname_) {}

    , decltype(_impl_.numvectors_) {}

    , decltype(_impl_.dim_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.indexname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_indexname().empty()) {
    _this->_impl_.indexname_.Set(from._internal_indexname(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.numvectors_, &from._impl_.numvectors_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.dim_) -
    reinterpret_cast<char*>(&_impl_.numvectors_)) + sizeof(_impl_.dim_));
  // @@protoc_insertion_point(copy_constructor:vecsearchgrpc.CreateIndexRequest)
}

inline void CreateIndexRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vecdata_) { arena }

    , decltype(_impl_.indexname_) {}

    , decltype(_impl_.numvectors_) { ::uint64_t{0u} }

    , decltype(_impl_.dim_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.indexname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateIndexRequest::~CreateIndexRequest() {
  // @@protoc_insertion_point(destructor:vecsearchgrpc.CreateIndexRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateIndexRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vecdata_.~RepeatedField();
  _impl_.indexname_.Destroy();
}

void CreateIndexRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateIndexRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vecsearchgrpc.CreateIndexRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vecdata()->Clear();
  _impl_.indexname_.ClearToEmpty();
  ::memset(&_impl_.numvectors_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dim_) -
      reinterpret_cast<char*>(&_impl_.numvectors_)) + sizeof(_impl_.dim_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateIndexRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string indexName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_indexname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.CreateIndexRequest.indexName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint64 numVectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.numvectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 dim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float vecData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vecdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 37) {
          _internal_add_vecdata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateIndexRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vecsearchgrpc.CreateIndexRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string indexName = 1;
  if (!this->_internal_indexname().empty()) {
    const std::string& _s = this->_internal_indexname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.CreateIndexRequest.indexName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint64 numVectors = 2;
  if (this->_internal_numvectors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this->_internal_numvectors(), target);
  }

  // uint32 dim = 3;
  if (this->_internal_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_dim(), target);
  }

  // repeated float vecData = 4;
  if (this->_internal_vecdata_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_vecdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vecsearchgrpc.CreateIndexRequest)
  return target;
}

::size_t CreateIndexRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vecsearchgrpc.CreateIndexRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vecData = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_vecdata_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string indexName = 1;
  if (!this->_internal_indexname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_indexname());
  }

  // uint64 numVectors = 2;
  if (this->_internal_numvectors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
        this->_internal_numvectors());
  }

  // uint32 dim = 3;
  if (this->_internal_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_dim());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateIndexRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateIndexRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateIndexRequest::GetClassData() const { return &_class_data_; }


void CreateIndexRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateIndexRequest*>(&to_msg);
  auto& from = static_cast<const CreateIndexRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vecsearchgrpc.CreateIndexRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vecdata_.MergeFrom(from._impl_.vecdata_);
  if (!from._internal_indexname().empty()) {
    _this->_internal_set_indexname(from._internal_indexname());
  }
  if (from._internal_numvectors() != 0) {
    _this->_internal_set_numvectors(from._internal_numvectors());
  }
  if (from._internal_dim() != 0) {
    _this->_internal_set_dim(from._internal_dim());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateIndexRequest::CopyFrom(const CreateIndexRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vecsearchgrpc.CreateIndexRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateIndexRequest::IsInitialized() const {
  return true;
}

void CreateIndexRequest::InternalSwap(CreateIndexRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vecdata_.InternalSwap(&other->_impl_.vecdata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.indexname_, lhs_arena,
                                       &other->_impl_.indexname_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateIndexRequest, _impl_.dim_)
      + sizeof(CreateIndexRequest::_impl_.dim_)
      - PROTOBUF_FIELD_OFFSET(CreateIndexRequest, _impl_.numvectors_)>(
          reinterpret_cast<char*>(&_impl_.numvectors_),
          reinterpret_cast<char*>(&other->_impl_.numvectors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateIndexRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vecsearch_2eproto_getter, &descriptor_table_vecsearch_2eproto_once,
      file_level_metadata_vecsearch_2eproto[0]);
}
// ===================================================================

class SearchRequest::_Internal {
 public:
};

SearchRequest::SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vecsearchgrpc.SearchRequest)
}
SearchRequest::SearchRequest(const SearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vecdata_) { from._impl_.vecdata_ }

    , decltype(_impl_.indexname_) {}

    , decltype(_impl_.numqueryvectors_) {}

    , decltype(_impl_.dim_) {}

    , decltype(_impl_.numneighbors_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.indexname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_indexname().empty()) {
    _this->_impl_.indexname_.Set(from._internal_indexname(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.numqueryvectors_, &from._impl_.numqueryvectors_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.numneighbors_) -
    reinterpret_cast<char*>(&_impl_.numqueryvectors_)) + sizeof(_impl_.numneighbors_));
  // @@protoc_insertion_point(copy_constructor:vecsearchgrpc.SearchRequest)
}

inline void SearchRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vecdata_) { arena }

    , decltype(_impl_.indexname_) {}

    , decltype(_impl_.numqueryvectors_) { 0u }

    , decltype(_impl_.dim_) { 0u }

    , decltype(_impl_.numneighbors_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.indexname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchRequest::~SearchRequest() {
  // @@protoc_insertion_point(destructor:vecsearchgrpc.SearchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vecdata_.~RepeatedField();
  _impl_.indexname_.Destroy();
}

void SearchRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vecsearchgrpc.SearchRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_vecdata()->Clear();
  _impl_.indexname_.ClearToEmpty();
  ::memset(&_impl_.numqueryvectors_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.numneighbors_) -
      reinterpret_cast<char*>(&_impl_.numqueryvectors_)) + sizeof(_impl_.numneighbors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string indexName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_indexname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.SearchRequest.indexName"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 numQueryVectors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.numqueryvectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 dim = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.dim_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float vecData = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vecdata(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 37) {
          _internal_add_vecdata(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 numNeighbors = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _impl_.numneighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SearchRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vecsearchgrpc.SearchRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string indexName = 1;
  if (!this->_internal_indexname().empty()) {
    const std::string& _s = this->_internal_indexname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.SearchRequest.indexName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 numQueryVectors = 2;
  if (this->_internal_numqueryvectors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_numqueryvectors(), target);
  }

  // uint32 dim = 3;
  if (this->_internal_dim() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_dim(), target);
  }

  // repeated float vecData = 4;
  if (this->_internal_vecdata_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_vecdata(), target);
  }

  // uint32 numNeighbors = 5;
  if (this->_internal_numneighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_numneighbors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vecsearchgrpc.SearchRequest)
  return target;
}

::size_t SearchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vecsearchgrpc.SearchRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vecData = 4;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_vecdata_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string indexName = 1;
  if (!this->_internal_indexname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_indexname());
  }

  // uint32 numQueryVectors = 2;
  if (this->_internal_numqueryvectors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_numqueryvectors());
  }

  // uint32 dim = 3;
  if (this->_internal_dim() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_dim());
  }

  // uint32 numNeighbors = 5;
  if (this->_internal_numneighbors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_numneighbors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchRequest::GetClassData() const { return &_class_data_; }


void SearchRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchRequest*>(&to_msg);
  auto& from = static_cast<const SearchRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vecsearchgrpc.SearchRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vecdata_.MergeFrom(from._impl_.vecdata_);
  if (!from._internal_indexname().empty()) {
    _this->_internal_set_indexname(from._internal_indexname());
  }
  if (from._internal_numqueryvectors() != 0) {
    _this->_internal_set_numqueryvectors(from._internal_numqueryvectors());
  }
  if (from._internal_dim() != 0) {
    _this->_internal_set_dim(from._internal_dim());
  }
  if (from._internal_numneighbors() != 0) {
    _this->_internal_set_numneighbors(from._internal_numneighbors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchRequest::CopyFrom(const SearchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vecsearchgrpc.SearchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchRequest::IsInitialized() const {
  return true;
}

void SearchRequest::InternalSwap(SearchRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vecdata_.InternalSwap(&other->_impl_.vecdata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.indexname_, lhs_arena,
                                       &other->_impl_.indexname_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.numneighbors_)
      + sizeof(SearchRequest::_impl_.numneighbors_)
      - PROTOBUF_FIELD_OFFSET(SearchRequest, _impl_.numqueryvectors_)>(
          reinterpret_cast<char*>(&_impl_.numqueryvectors_),
          reinterpret_cast<char*>(&other->_impl_.numqueryvectors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vecsearch_2eproto_getter, &descriptor_table_vecsearch_2eproto_once,
      file_level_metadata_vecsearch_2eproto[1]);
}
// ===================================================================

class SearchReply::_Internal {
 public:
};

SearchReply::SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vecsearchgrpc.SearchReply)
}
SearchReply::SearchReply(const SearchReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.i_) { from._impl_.i_ }
    ,/* _impl_._i_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.d_) { from._impl_.d_ }

    , decltype(_impl_.status_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.numqueryvectors_) {}

    , decltype(_impl_.numneighbors_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.numqueryvectors_, &from._impl_.numqueryvectors_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.numneighbors_) -
    reinterpret_cast<char*>(&_impl_.numqueryvectors_)) + sizeof(_impl_.numneighbors_));
  // @@protoc_insertion_point(copy_constructor:vecsearchgrpc.SearchReply)
}

inline void SearchReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.i_) { arena }
    ,/* _impl_._i_cached_byte_size_ = */ { 0 }

    , decltype(_impl_.d_) { arena }

    , decltype(_impl_.status_) {}

    , decltype(_impl_.message_) {}

    , decltype(_impl_.numqueryvectors_) { 0u }

    , decltype(_impl_.numneighbors_) { 0u }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SearchReply::~SearchReply() {
  // @@protoc_insertion_point(destructor:vecsearchgrpc.SearchReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.i_.~RepeatedField();
  _impl_.d_.~RepeatedField();
  _impl_.status_.Destroy();
  _impl_.message_.Destroy();
}

void SearchReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vecsearchgrpc.SearchReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_i()->Clear();
  _internal_mutable_d()->Clear();
  _impl_.status_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.numqueryvectors_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.numneighbors_) -
      reinterpret_cast<char*>(&_impl_.numqueryvectors_)) + sizeof(_impl_.numneighbors_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.SearchReply.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.SearchReply.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 numQueryVectors = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.numqueryvectors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // uint32 numNeighbors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.numneighbors_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated uint32 I = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_i(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 40) {
          _internal_add_i(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated float D = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::uint8_t>(tag) == 53) {
          _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SearchReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vecsearchgrpc.SearchReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.SearchReply.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.SearchReply.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // uint32 numQueryVectors = 3;
  if (this->_internal_numqueryvectors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_numqueryvectors(), target);
  }

  // uint32 numNeighbors = 4;
  if (this->_internal_numneighbors() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_numneighbors(), target);
  }

  // repeated uint32 I = 5;
  {
    int byte_size = _impl_._i_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(5, _internal_i(),
                                                 byte_size, target);
    }
  }

  // repeated float D = 6;
  if (this->_internal_d_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vecsearchgrpc.SearchReply)
  return target;
}

::size_t SearchReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vecsearchgrpc.SearchReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 I = 5;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_i())
    ;
    _impl_._i_cached_byte_size_.Set(::_pbi::ToCachedSize(data_size));
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // repeated float D = 6;
  {
    std::size_t data_size = std::size_t{4} *
        ::_pbi::FromIntSize(this->_internal_d_size())
    ;
    std::size_t tag_size = data_size == 0
        ? 0
        : 1 + ::_pbi::WireFormatLite::Int32Size(
                            static_cast<int32_t>(data_size))
    ;
    total_size += tag_size + data_size;
  }

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  // uint32 numQueryVectors = 3;
  if (this->_internal_numqueryvectors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_numqueryvectors());
  }

  // uint32 numNeighbors = 4;
  if (this->_internal_numneighbors() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_numneighbors());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchReply::GetClassData() const { return &_class_data_; }


void SearchReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchReply*>(&to_msg);
  auto& from = static_cast<const SearchReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vecsearchgrpc.SearchReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.i_.MergeFrom(from._impl_.i_);
  _this->_impl_.d_.MergeFrom(from._impl_.d_);
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_numqueryvectors() != 0) {
    _this->_internal_set_numqueryvectors(from._internal_numqueryvectors());
  }
  if (from._internal_numneighbors() != 0) {
    _this->_internal_set_numneighbors(from._internal_numneighbors());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchReply::CopyFrom(const SearchReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vecsearchgrpc.SearchReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchReply::IsInitialized() const {
  return true;
}

void SearchReply::InternalSwap(SearchReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.i_.InternalSwap(&other->_impl_.i_);
  _impl_.d_.InternalSwap(&other->_impl_.d_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchReply, _impl_.numneighbors_)
      + sizeof(SearchReply::_impl_.numneighbors_)
      - PROTOBUF_FIELD_OFFSET(SearchReply, _impl_.numqueryvectors_)>(
          reinterpret_cast<char*>(&_impl_.numqueryvectors_),
          reinterpret_cast<char*>(&other->_impl_.numqueryvectors_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vecsearch_2eproto_getter, &descriptor_table_vecsearch_2eproto_once,
      file_level_metadata_vecsearch_2eproto[2]);
}
// ===================================================================

class DefaultRequest::_Internal {
 public:
};

DefaultRequest::DefaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vecsearchgrpc.DefaultRequest)
}
DefaultRequest::DefaultRequest(const DefaultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DefaultRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.indexname_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.indexname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_indexname().empty()) {
    _this->_impl_.indexname_.Set(from._internal_indexname(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vecsearchgrpc.DefaultRequest)
}

inline void DefaultRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.indexname_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.indexname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.indexname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DefaultRequest::~DefaultRequest() {
  // @@protoc_insertion_point(destructor:vecsearchgrpc.DefaultRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DefaultRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.indexname_.Destroy();
}

void DefaultRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DefaultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:vecsearchgrpc.DefaultRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indexname_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string indexName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_indexname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.DefaultRequest.indexName"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DefaultRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vecsearchgrpc.DefaultRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string indexName = 1;
  if (!this->_internal_indexname().empty()) {
    const std::string& _s = this->_internal_indexname();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.DefaultRequest.indexName");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vecsearchgrpc.DefaultRequest)
  return target;
}

::size_t DefaultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vecsearchgrpc.DefaultRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string indexName = 1;
  if (!this->_internal_indexname().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_indexname());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DefaultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultRequest::GetClassData() const { return &_class_data_; }


void DefaultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DefaultRequest*>(&to_msg);
  auto& from = static_cast<const DefaultRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vecsearchgrpc.DefaultRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_indexname().empty()) {
    _this->_internal_set_indexname(from._internal_indexname());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultRequest::CopyFrom(const DefaultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vecsearchgrpc.DefaultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultRequest::IsInitialized() const {
  return true;
}

void DefaultRequest::InternalSwap(DefaultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.indexname_, lhs_arena,
                                       &other->_impl_.indexname_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vecsearch_2eproto_getter, &descriptor_table_vecsearch_2eproto_once,
      file_level_metadata_vecsearch_2eproto[3]);
}
// ===================================================================

class DefaultReply::_Internal {
 public:
};

DefaultReply::DefaultReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:vecsearchgrpc.DefaultReply)
}
DefaultReply::DefaultReply(const DefaultReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DefaultReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    _this->_impl_.status_.Set(from._internal_status(), _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vecsearchgrpc.DefaultReply)
}

inline void DefaultReply::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_) {}

    , decltype(_impl_.message_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.status_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DefaultReply::~DefaultReply() {
  // @@protoc_insertion_point(destructor:vecsearchgrpc.DefaultReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DefaultReply::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.Destroy();
  _impl_.message_.Destroy();
}

void DefaultReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DefaultReply::Clear() {
// @@protoc_insertion_point(message_clear_start:vecsearchgrpc.DefaultReply)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DefaultReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.DefaultReply.status"));
        } else {
          goto handle_unusual;
        }
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vecsearchgrpc.DefaultReply.message"));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DefaultReply::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vecsearchgrpc.DefaultReply)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    const std::string& _s = this->_internal_status();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.DefaultReply.status");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    const std::string& _s = this->_internal_message();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "vecsearchgrpc.DefaultReply.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vecsearchgrpc.DefaultReply)
  return target;
}

::size_t DefaultReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vecsearchgrpc.DefaultReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1;
  if (!this->_internal_status().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_status());
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_message());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DefaultReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DefaultReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DefaultReply::GetClassData() const { return &_class_data_; }


void DefaultReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DefaultReply*>(&to_msg);
  auto& from = static_cast<const DefaultReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vecsearchgrpc.DefaultReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DefaultReply::CopyFrom(const DefaultReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vecsearchgrpc.DefaultReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultReply::IsInitialized() const {
  return true;
}

void DefaultReply::InternalSwap(DefaultReply* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, lhs_arena,
                                       &other->_impl_.status_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_vecsearch_2eproto_getter, &descriptor_table_vecsearch_2eproto_once,
      file_level_metadata_vecsearch_2eproto[4]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace vecsearchgrpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vecsearchgrpc::CreateIndexRequest*
Arena::CreateMaybeMessage< ::vecsearchgrpc::CreateIndexRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vecsearchgrpc::CreateIndexRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vecsearchgrpc::SearchRequest*
Arena::CreateMaybeMessage< ::vecsearchgrpc::SearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vecsearchgrpc::SearchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vecsearchgrpc::SearchReply*
Arena::CreateMaybeMessage< ::vecsearchgrpc::SearchReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vecsearchgrpc::SearchReply >(arena);
}
template<> PROTOBUF_NOINLINE ::vecsearchgrpc::DefaultRequest*
Arena::CreateMaybeMessage< ::vecsearchgrpc::DefaultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vecsearchgrpc::DefaultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::vecsearchgrpc::DefaultReply*
Arena::CreateMaybeMessage< ::vecsearchgrpc::DefaultReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vecsearchgrpc::DefaultReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
