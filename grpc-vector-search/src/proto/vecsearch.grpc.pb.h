// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: vecsearch.proto
#ifndef GRPC_vecsearch_2eproto__INCLUDED
#define GRPC_vecsearch_2eproto__INCLUDED

#include "vecsearch.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace vecsearchgrpc {

class VectorSearchGrpc final {
 public:
  static constexpr char const* service_full_name() {
    return "vecsearchgrpc.VectorSearchGrpc";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status createIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::vecsearchgrpc::DefaultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> AsynccreateIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(AsynccreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> PrepareAsynccreateIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(PrepareAsynccreateIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status deleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::vecsearchgrpc::DefaultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> AsyncdeleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(AsyncdeleteIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> PrepareAsyncdeleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(PrepareAsyncdeleteIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status loadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::vecsearchgrpc::DefaultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> AsyncloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(AsyncloadIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> PrepareAsyncloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(PrepareAsyncloadIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status unloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::vecsearchgrpc::DefaultReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> AsyncunloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(AsyncunloadIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>> PrepareAsyncunloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>>(PrepareAsyncunloadIndexRaw(context, request, cq));
    }
    virtual ::grpc::Status searchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::vecsearchgrpc::SearchReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::SearchReply>> AsyncsearchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::SearchReply>>(AsyncsearchNeighborsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::SearchReply>> PrepareAsyncsearchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::SearchReply>>(PrepareAsyncsearchNeighborsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void createIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void createIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void deleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void deleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void loadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void unloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void unloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void searchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest* request, ::vecsearchgrpc::SearchReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void searchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest* request, ::vecsearchgrpc::SearchReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* AsynccreateIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* PrepareAsynccreateIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* AsyncdeleteIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* PrepareAsyncdeleteIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* AsyncloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* PrepareAsyncloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* AsyncunloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::DefaultReply>* PrepareAsyncunloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::SearchReply>* AsyncsearchNeighborsRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::vecsearchgrpc::SearchReply>* PrepareAsyncsearchNeighborsRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status createIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::vecsearchgrpc::DefaultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> AsynccreateIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(AsynccreateIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> PrepareAsynccreateIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(PrepareAsynccreateIndexRaw(context, request, cq));
    }
    ::grpc::Status deleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::vecsearchgrpc::DefaultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> AsyncdeleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(AsyncdeleteIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> PrepareAsyncdeleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(PrepareAsyncdeleteIndexRaw(context, request, cq));
    }
    ::grpc::Status loadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::vecsearchgrpc::DefaultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> AsyncloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(AsyncloadIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> PrepareAsyncloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(PrepareAsyncloadIndexRaw(context, request, cq));
    }
    ::grpc::Status unloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::vecsearchgrpc::DefaultReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> AsyncunloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(AsyncunloadIndexRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>> PrepareAsyncunloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>>(PrepareAsyncunloadIndexRaw(context, request, cq));
    }
    ::grpc::Status searchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::vecsearchgrpc::SearchReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::SearchReply>> AsyncsearchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::SearchReply>>(AsyncsearchNeighborsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::SearchReply>> PrepareAsyncsearchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::SearchReply>>(PrepareAsyncsearchNeighborsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void createIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) override;
      void createIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void deleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) override;
      void deleteIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) override;
      void loadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void unloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, std::function<void(::grpc::Status)>) override;
      void unloadIndex(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void searchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest* request, ::vecsearchgrpc::SearchReply* response, std::function<void(::grpc::Status)>) override;
      void searchNeighbors(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest* request, ::vecsearchgrpc::SearchReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* AsynccreateIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* PrepareAsynccreateIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::CreateIndexRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* AsyncdeleteIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* PrepareAsyncdeleteIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* AsyncloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* PrepareAsyncloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* AsyncunloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::DefaultReply>* PrepareAsyncunloadIndexRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::DefaultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::SearchReply>* AsyncsearchNeighborsRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::vecsearchgrpc::SearchReply>* PrepareAsyncsearchNeighborsRaw(::grpc::ClientContext* context, const ::vecsearchgrpc::SearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_createIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_deleteIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_loadIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_unloadIndex_;
    const ::grpc::internal::RpcMethod rpcmethod_searchNeighbors_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status createIndex(::grpc::ServerContext* context, const ::vecsearchgrpc::CreateIndexRequest* request, ::vecsearchgrpc::DefaultReply* response);
    virtual ::grpc::Status deleteIndex(::grpc::ServerContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response);
    virtual ::grpc::Status loadIndex(::grpc::ServerContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response);
    virtual ::grpc::Status unloadIndex(::grpc::ServerContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response);
    virtual ::grpc::Status searchNeighbors(::grpc::ServerContext* context, const ::vecsearchgrpc::SearchRequest* request, ::vecsearchgrpc::SearchReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_createIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_createIndex() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_createIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateIndex(::grpc::ServerContext* context, ::vecsearchgrpc::CreateIndexRequest* request, ::grpc::ServerAsyncResponseWriter< ::vecsearchgrpc::DefaultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_deleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_deleteIndex() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_deleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteIndex(::grpc::ServerContext* context, ::vecsearchgrpc::DefaultRequest* request, ::grpc::ServerAsyncResponseWriter< ::vecsearchgrpc::DefaultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loadIndex() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_loadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadIndex(::grpc::ServerContext* context, ::vecsearchgrpc::DefaultRequest* request, ::grpc::ServerAsyncResponseWriter< ::vecsearchgrpc::DefaultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_unloadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_unloadIndex() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_unloadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunloadIndex(::grpc::ServerContext* context, ::vecsearchgrpc::DefaultRequest* request, ::grpc::ServerAsyncResponseWriter< ::vecsearchgrpc::DefaultReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_searchNeighbors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_searchNeighbors() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_searchNeighbors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNeighbors(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNeighbors(::grpc::ServerContext* context, ::vecsearchgrpc::SearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::vecsearchgrpc::SearchReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_createIndex<WithAsyncMethod_deleteIndex<WithAsyncMethod_loadIndex<WithAsyncMethod_unloadIndex<WithAsyncMethod_searchNeighbors<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_createIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_createIndex() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::CreateIndexRequest, ::vecsearchgrpc::DefaultReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vecsearchgrpc::CreateIndexRequest* request, ::vecsearchgrpc::DefaultReply* response) { return this->createIndex(context, request, response); }));}
    void SetMessageAllocatorFor_createIndex(
        ::grpc::MessageAllocator< ::vecsearchgrpc::CreateIndexRequest, ::vecsearchgrpc::DefaultReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::CreateIndexRequest, ::vecsearchgrpc::DefaultReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_createIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_deleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_deleteIndex() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response) { return this->deleteIndex(context, request, response); }));}
    void SetMessageAllocatorFor_deleteIndex(
        ::grpc::MessageAllocator< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_deleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loadIndex() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response) { return this->loadIndex(context, request, response); }));}
    void SetMessageAllocatorFor_loadIndex(
        ::grpc::MessageAllocator< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_unloadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_unloadIndex() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vecsearchgrpc::DefaultRequest* request, ::vecsearchgrpc::DefaultReply* response) { return this->unloadIndex(context, request, response); }));}
    void SetMessageAllocatorFor_unloadIndex(
        ::grpc::MessageAllocator< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_unloadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unloadIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_searchNeighbors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_searchNeighbors() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::SearchRequest, ::vecsearchgrpc::SearchReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::vecsearchgrpc::SearchRequest* request, ::vecsearchgrpc::SearchReply* response) { return this->searchNeighbors(context, request, response); }));}
    void SetMessageAllocatorFor_searchNeighbors(
        ::grpc::MessageAllocator< ::vecsearchgrpc::SearchRequest, ::vecsearchgrpc::SearchReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::vecsearchgrpc::SearchRequest, ::vecsearchgrpc::SearchReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_searchNeighbors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNeighbors(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchNeighbors(
      ::grpc::CallbackServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_createIndex<WithCallbackMethod_deleteIndex<WithCallbackMethod_loadIndex<WithCallbackMethod_unloadIndex<WithCallbackMethod_searchNeighbors<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_createIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_createIndex() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_createIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_deleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_deleteIndex() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_deleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loadIndex() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_loadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_unloadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_unloadIndex() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_unloadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_searchNeighbors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_searchNeighbors() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_searchNeighbors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNeighbors(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_createIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_createIndex() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_createIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestcreateIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_deleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_deleteIndex() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_deleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestdeleteIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loadIndex() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_loadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloadIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_unloadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_unloadIndex() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_unloadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestunloadIndex(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_searchNeighbors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_searchNeighbors() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_searchNeighbors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNeighbors(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestsearchNeighbors(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_createIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_createIndex() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->createIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_createIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status createIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* createIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_deleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_deleteIndex() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->deleteIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_deleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status deleteIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* deleteIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loadIndex() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loadIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_loadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loadIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_unloadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_unloadIndex() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->unloadIndex(context, request, response); }));
    }
    ~WithRawCallbackMethod_unloadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status unloadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* unloadIndex(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_searchNeighbors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_searchNeighbors() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->searchNeighbors(context, request, response); }));
    }
    ~WithRawCallbackMethod_searchNeighbors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status searchNeighbors(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* searchNeighbors(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_createIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_createIndex() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vecsearchgrpc::CreateIndexRequest, ::vecsearchgrpc::DefaultReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vecsearchgrpc::CreateIndexRequest, ::vecsearchgrpc::DefaultReply>* streamer) {
                       return this->StreamedcreateIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_createIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status createIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::CreateIndexRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedcreateIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vecsearchgrpc::CreateIndexRequest,::vecsearchgrpc::DefaultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_deleteIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_deleteIndex() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>* streamer) {
                       return this->StreameddeleteIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_deleteIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status deleteIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreameddeleteIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vecsearchgrpc::DefaultRequest,::vecsearchgrpc::DefaultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loadIndex() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>* streamer) {
                       return this->StreamedloadIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloadIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vecsearchgrpc::DefaultRequest,::vecsearchgrpc::DefaultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_unloadIndex : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_unloadIndex() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vecsearchgrpc::DefaultRequest, ::vecsearchgrpc::DefaultReply>* streamer) {
                       return this->StreamedunloadIndex(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_unloadIndex() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status unloadIndex(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::DefaultRequest* /*request*/, ::vecsearchgrpc::DefaultReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedunloadIndex(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vecsearchgrpc::DefaultRequest,::vecsearchgrpc::DefaultReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_searchNeighbors : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_searchNeighbors() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::vecsearchgrpc::SearchRequest, ::vecsearchgrpc::SearchReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::vecsearchgrpc::SearchRequest, ::vecsearchgrpc::SearchReply>* streamer) {
                       return this->StreamedsearchNeighbors(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_searchNeighbors() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status searchNeighbors(::grpc::ServerContext* /*context*/, const ::vecsearchgrpc::SearchRequest* /*request*/, ::vecsearchgrpc::SearchReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedsearchNeighbors(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::vecsearchgrpc::SearchRequest,::vecsearchgrpc::SearchReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_createIndex<WithStreamedUnaryMethod_deleteIndex<WithStreamedUnaryMethod_loadIndex<WithStreamedUnaryMethod_unloadIndex<WithStreamedUnaryMethod_searchNeighbors<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_createIndex<WithStreamedUnaryMethod_deleteIndex<WithStreamedUnaryMethod_loadIndex<WithStreamedUnaryMethod_unloadIndex<WithStreamedUnaryMethod_searchNeighbors<Service > > > > > StreamedService;
};

}  // namespace vecsearchgrpc


#endif  // GRPC_vecsearch_2eproto__INCLUDED
