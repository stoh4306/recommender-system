// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vecsearch.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_vecsearch_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_vecsearch_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_vecsearch_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_vecsearch_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_vecsearch_2eproto;
namespace vecsearchgrpc {
class CreateIndexRequest;
struct CreateIndexRequestDefaultTypeInternal;
extern CreateIndexRequestDefaultTypeInternal _CreateIndexRequest_default_instance_;
class DefaultReply;
struct DefaultReplyDefaultTypeInternal;
extern DefaultReplyDefaultTypeInternal _DefaultReply_default_instance_;
class DefaultRequest;
struct DefaultRequestDefaultTypeInternal;
extern DefaultRequestDefaultTypeInternal _DefaultRequest_default_instance_;
class SearchReply;
struct SearchReplyDefaultTypeInternal;
extern SearchReplyDefaultTypeInternal _SearchReply_default_instance_;
class SearchRequest;
struct SearchRequestDefaultTypeInternal;
extern SearchRequestDefaultTypeInternal _SearchRequest_default_instance_;
}  // namespace vecsearchgrpc
PROTOBUF_NAMESPACE_OPEN
template <>
::vecsearchgrpc::CreateIndexRequest* Arena::CreateMaybeMessage<::vecsearchgrpc::CreateIndexRequest>(Arena*);
template <>
::vecsearchgrpc::DefaultReply* Arena::CreateMaybeMessage<::vecsearchgrpc::DefaultReply>(Arena*);
template <>
::vecsearchgrpc::DefaultRequest* Arena::CreateMaybeMessage<::vecsearchgrpc::DefaultRequest>(Arena*);
template <>
::vecsearchgrpc::SearchReply* Arena::CreateMaybeMessage<::vecsearchgrpc::SearchReply>(Arena*);
template <>
::vecsearchgrpc::SearchRequest* Arena::CreateMaybeMessage<::vecsearchgrpc::SearchRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace vecsearchgrpc {

// ===================================================================


// -------------------------------------------------------------------

class CreateIndexRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vecsearchgrpc.CreateIndexRequest) */ {
 public:
  inline CreateIndexRequest() : CreateIndexRequest(nullptr) {}
  ~CreateIndexRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateIndexRequest(const CreateIndexRequest& from);
  CreateIndexRequest(CreateIndexRequest&& from) noexcept
    : CreateIndexRequest() {
    *this = ::std::move(from);
  }

  inline CreateIndexRequest& operator=(const CreateIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateIndexRequest& operator=(CreateIndexRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateIndexRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateIndexRequest* internal_default_instance() {
    return reinterpret_cast<const CreateIndexRequest*>(
               &_CreateIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateIndexRequest& a, CreateIndexRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateIndexRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateIndexRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateIndexRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateIndexRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateIndexRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateIndexRequest& from) {
    CreateIndexRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateIndexRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "vecsearchgrpc.CreateIndexRequest";
  }
  protected:
  explicit CreateIndexRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecDataFieldNumber = 4,
    kIndexNameFieldNumber = 1,
    kNumVectorsFieldNumber = 2,
    kDimFieldNumber = 3,
  };
  // repeated float vecData = 4;
  int vecdata_size() const;
  private:
  int _internal_vecdata_size() const;

  public:
  void clear_vecdata() ;
  float vecdata(int index) const;
  void set_vecdata(int index, float value);
  void add_vecdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& vecdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_vecdata();

  private:
  float _internal_vecdata(int index) const;
  void _internal_add_vecdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_vecdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_vecdata();

  public:
  // string indexName = 1;
  void clear_indexname() ;
  const std::string& indexname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_indexname(Arg_&& arg, Args_... args);
  std::string* mutable_indexname();
  PROTOBUF_NODISCARD std::string* release_indexname();
  void set_allocated_indexname(std::string* ptr);

  private:
  const std::string& _internal_indexname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_indexname(
      const std::string& value);
  std::string* _internal_mutable_indexname();

  public:
  // uint64 numVectors = 2;
  void clear_numvectors() ;
  ::uint64_t numvectors() const;
  void set_numvectors(::uint64_t value);

  private:
  ::uint64_t _internal_numvectors() const;
  void _internal_set_numvectors(::uint64_t value);

  public:
  // uint32 dim = 3;
  void clear_dim() ;
  ::uint32_t dim() const;
  void set_dim(::uint32_t value);

  private:
  ::uint32_t _internal_dim() const;
  void _internal_set_dim(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:vecsearchgrpc.CreateIndexRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> vecdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indexname_;
    ::uint64_t numvectors_;
    ::uint32_t dim_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vecsearch_2eproto;
};// -------------------------------------------------------------------

class SearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vecsearchgrpc.SearchRequest) */ {
 public:
  inline SearchRequest() : SearchRequest(nullptr) {}
  ~SearchRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchRequest(const SearchRequest& from);
  SearchRequest(SearchRequest&& from) noexcept
    : SearchRequest() {
    *this = ::std::move(from);
  }

  inline SearchRequest& operator=(const SearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchRequest& operator=(SearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchRequest* internal_default_instance() {
    return reinterpret_cast<const SearchRequest*>(
               &_SearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchRequest& a, SearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchRequest& from) {
    SearchRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "vecsearchgrpc.SearchRequest";
  }
  protected:
  explicit SearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecDataFieldNumber = 4,
    kIndexNameFieldNumber = 1,
    kNumQueryVectorsFieldNumber = 2,
    kDimFieldNumber = 3,
    kNumNeighborsFieldNumber = 5,
  };
  // repeated float vecData = 4;
  int vecdata_size() const;
  private:
  int _internal_vecdata_size() const;

  public:
  void clear_vecdata() ;
  float vecdata(int index) const;
  void set_vecdata(int index, float value);
  void add_vecdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& vecdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_vecdata();

  private:
  float _internal_vecdata(int index) const;
  void _internal_add_vecdata(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_vecdata() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_vecdata();

  public:
  // string indexName = 1;
  void clear_indexname() ;
  const std::string& indexname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_indexname(Arg_&& arg, Args_... args);
  std::string* mutable_indexname();
  PROTOBUF_NODISCARD std::string* release_indexname();
  void set_allocated_indexname(std::string* ptr);

  private:
  const std::string& _internal_indexname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_indexname(
      const std::string& value);
  std::string* _internal_mutable_indexname();

  public:
  // uint32 numQueryVectors = 2;
  void clear_numqueryvectors() ;
  ::uint32_t numqueryvectors() const;
  void set_numqueryvectors(::uint32_t value);

  private:
  ::uint32_t _internal_numqueryvectors() const;
  void _internal_set_numqueryvectors(::uint32_t value);

  public:
  // uint32 dim = 3;
  void clear_dim() ;
  ::uint32_t dim() const;
  void set_dim(::uint32_t value);

  private:
  ::uint32_t _internal_dim() const;
  void _internal_set_dim(::uint32_t value);

  public:
  // uint32 numNeighbors = 5;
  void clear_numneighbors() ;
  ::uint32_t numneighbors() const;
  void set_numneighbors(::uint32_t value);

  private:
  ::uint32_t _internal_numneighbors() const;
  void _internal_set_numneighbors(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:vecsearchgrpc.SearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> vecdata_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indexname_;
    ::uint32_t numqueryvectors_;
    ::uint32_t dim_;
    ::uint32_t numneighbors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vecsearch_2eproto;
};// -------------------------------------------------------------------

class SearchReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vecsearchgrpc.SearchReply) */ {
 public:
  inline SearchReply() : SearchReply(nullptr) {}
  ~SearchReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SearchReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchReply(const SearchReply& from);
  SearchReply(SearchReply&& from) noexcept
    : SearchReply() {
    *this = ::std::move(from);
  }

  inline SearchReply& operator=(const SearchReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchReply& operator=(SearchReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchReply* internal_default_instance() {
    return reinterpret_cast<const SearchReply*>(
               &_SearchReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchReply& a, SearchReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchReply& from) {
    SearchReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "vecsearchgrpc.SearchReply";
  }
  protected:
  explicit SearchReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIFieldNumber = 5,
    kDFieldNumber = 6,
    kStatusFieldNumber = 1,
    kMessageFieldNumber = 2,
    kNumQueryVectorsFieldNumber = 3,
    kNumNeighborsFieldNumber = 4,
  };
  // repeated uint32 I = 5;
  int i_size() const;
  private:
  int _internal_i_size() const;

  public:
  void clear_i() ;
  ::uint32_t i(int index) const;
  void set_i(int index, ::uint32_t value);
  void add_i(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* mutable_i();

  private:
  ::uint32_t _internal_i(int index) const;
  void _internal_add_i(::uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& _internal_i() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* _internal_mutable_i();

  public:
  // repeated float D = 6;
  int d_size() const;
  private:
  int _internal_d_size() const;

  public:
  void clear_d() ;
  float d(int index) const;
  void set_d(int index, float value);
  void add_d(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* mutable_d();

  private:
  float _internal_d(int index) const;
  void _internal_add_d(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& _internal_d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* _internal_mutable_d();

  public:
  // string status = 1;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // uint32 numQueryVectors = 3;
  void clear_numqueryvectors() ;
  ::uint32_t numqueryvectors() const;
  void set_numqueryvectors(::uint32_t value);

  private:
  ::uint32_t _internal_numqueryvectors() const;
  void _internal_set_numqueryvectors(::uint32_t value);

  public:
  // uint32 numNeighbors = 4;
  void clear_numneighbors() ;
  ::uint32_t numneighbors() const;
  void set_numneighbors(::uint32_t value);

  private:
  ::uint32_t _internal_numneighbors() const;
  void _internal_set_numneighbors(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:vecsearchgrpc.SearchReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t> i_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _i_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<float> d_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::uint32_t numqueryvectors_;
    ::uint32_t numneighbors_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vecsearch_2eproto;
};// -------------------------------------------------------------------

class DefaultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vecsearchgrpc.DefaultRequest) */ {
 public:
  inline DefaultRequest() : DefaultRequest(nullptr) {}
  ~DefaultRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DefaultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefaultRequest(const DefaultRequest& from);
  DefaultRequest(DefaultRequest&& from) noexcept
    : DefaultRequest() {
    *this = ::std::move(from);
  }

  inline DefaultRequest& operator=(const DefaultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultRequest& operator=(DefaultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultRequest* internal_default_instance() {
    return reinterpret_cast<const DefaultRequest*>(
               &_DefaultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DefaultRequest& a, DefaultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefaultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DefaultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DefaultRequest& from) {
    DefaultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "vecsearchgrpc.DefaultRequest";
  }
  protected:
  explicit DefaultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexNameFieldNumber = 1,
  };
  // string indexName = 1;
  void clear_indexname() ;
  const std::string& indexname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_indexname(Arg_&& arg, Args_... args);
  std::string* mutable_indexname();
  PROTOBUF_NODISCARD std::string* release_indexname();
  void set_allocated_indexname(std::string* ptr);

  private:
  const std::string& _internal_indexname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_indexname(
      const std::string& value);
  std::string* _internal_mutable_indexname();

  public:
  // @@protoc_insertion_point(class_scope:vecsearchgrpc.DefaultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr indexname_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vecsearch_2eproto;
};// -------------------------------------------------------------------

class DefaultReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:vecsearchgrpc.DefaultReply) */ {
 public:
  inline DefaultReply() : DefaultReply(nullptr) {}
  ~DefaultReply() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DefaultReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DefaultReply(const DefaultReply& from);
  DefaultReply(DefaultReply&& from) noexcept
    : DefaultReply() {
    *this = ::std::move(from);
  }

  inline DefaultReply& operator=(const DefaultReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultReply& operator=(DefaultReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DefaultReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const DefaultReply* internal_default_instance() {
    return reinterpret_cast<const DefaultReply*>(
               &_DefaultReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DefaultReply& a, DefaultReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultReply* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DefaultReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DefaultReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DefaultReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DefaultReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DefaultReply& from) {
    DefaultReply::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultReply* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "vecsearchgrpc.DefaultReply";
  }
  protected:
  explicit DefaultReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string status = 1;
  void clear_status() ;
  const std::string& status() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* ptr);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string message = 2;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // @@protoc_insertion_point(class_scope:vecsearchgrpc.DefaultReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_vecsearch_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CreateIndexRequest

// string indexName = 1;
inline void CreateIndexRequest::clear_indexname() {
  _impl_.indexname_.ClearToEmpty();
}
inline const std::string& CreateIndexRequest::indexname() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.CreateIndexRequest.indexName)
  return _internal_indexname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateIndexRequest::set_indexname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.indexname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.CreateIndexRequest.indexName)
}
inline std::string* CreateIndexRequest::mutable_indexname() {
  std::string* _s = _internal_mutable_indexname();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.CreateIndexRequest.indexName)
  return _s;
}
inline const std::string& CreateIndexRequest::_internal_indexname() const {
  return _impl_.indexname_.Get();
}
inline void CreateIndexRequest::_internal_set_indexname(const std::string& value) {
  ;


  _impl_.indexname_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::_internal_mutable_indexname() {
  ;
  return _impl_.indexname_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateIndexRequest::release_indexname() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.CreateIndexRequest.indexName)
  return _impl_.indexname_.Release();
}
inline void CreateIndexRequest::set_allocated_indexname(std::string* value) {
  _impl_.indexname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.indexname_.IsDefault()) {
          _impl_.indexname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.CreateIndexRequest.indexName)
}

// uint64 numVectors = 2;
inline void CreateIndexRequest::clear_numvectors() {
  _impl_.numvectors_ = ::uint64_t{0u};
}
inline ::uint64_t CreateIndexRequest::numvectors() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.CreateIndexRequest.numVectors)
  return _internal_numvectors();
}
inline void CreateIndexRequest::set_numvectors(::uint64_t value) {
  _internal_set_numvectors(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.CreateIndexRequest.numVectors)
}
inline ::uint64_t CreateIndexRequest::_internal_numvectors() const {
  return _impl_.numvectors_;
}
inline void CreateIndexRequest::_internal_set_numvectors(::uint64_t value) {
  ;
  _impl_.numvectors_ = value;
}

// uint32 dim = 3;
inline void CreateIndexRequest::clear_dim() {
  _impl_.dim_ = 0u;
}
inline ::uint32_t CreateIndexRequest::dim() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.CreateIndexRequest.dim)
  return _internal_dim();
}
inline void CreateIndexRequest::set_dim(::uint32_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.CreateIndexRequest.dim)
}
inline ::uint32_t CreateIndexRequest::_internal_dim() const {
  return _impl_.dim_;
}
inline void CreateIndexRequest::_internal_set_dim(::uint32_t value) {
  ;
  _impl_.dim_ = value;
}

// repeated float vecData = 4;
inline int CreateIndexRequest::_internal_vecdata_size() const {
  return _impl_.vecdata_.size();
}
inline int CreateIndexRequest::vecdata_size() const {
  return _internal_vecdata_size();
}
inline void CreateIndexRequest::clear_vecdata() {
  _internal_mutable_vecdata()->Clear();
}
inline float CreateIndexRequest::vecdata(int index) const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.CreateIndexRequest.vecData)
  return _internal_vecdata(index);
}
inline void CreateIndexRequest::set_vecdata(int index, float value) {
  _internal_mutable_vecdata()->Set(index, value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.CreateIndexRequest.vecData)
}
inline void CreateIndexRequest::add_vecdata(float value) {
  _internal_add_vecdata(value);
  // @@protoc_insertion_point(field_add:vecsearchgrpc.CreateIndexRequest.vecData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& CreateIndexRequest::vecdata() const {
  // @@protoc_insertion_point(field_list:vecsearchgrpc.CreateIndexRequest.vecData)
  return _internal_vecdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* CreateIndexRequest::mutable_vecdata() {
  // @@protoc_insertion_point(field_mutable_list:vecsearchgrpc.CreateIndexRequest.vecData)
  return _internal_mutable_vecdata();
}

inline float CreateIndexRequest::_internal_vecdata(int index) const {
  return _internal_vecdata().Get(index);
}
inline void CreateIndexRequest::_internal_add_vecdata(float value) {
  _internal_mutable_vecdata()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& CreateIndexRequest::_internal_vecdata() const {
  return _impl_.vecdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* CreateIndexRequest::_internal_mutable_vecdata() {
  return &_impl_.vecdata_;
}

// -------------------------------------------------------------------

// SearchRequest

// string indexName = 1;
inline void SearchRequest::clear_indexname() {
  _impl_.indexname_.ClearToEmpty();
}
inline const std::string& SearchRequest::indexname() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchRequest.indexName)
  return _internal_indexname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchRequest::set_indexname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.indexname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchRequest.indexName)
}
inline std::string* SearchRequest::mutable_indexname() {
  std::string* _s = _internal_mutable_indexname();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.SearchRequest.indexName)
  return _s;
}
inline const std::string& SearchRequest::_internal_indexname() const {
  return _impl_.indexname_.Get();
}
inline void SearchRequest::_internal_set_indexname(const std::string& value) {
  ;


  _impl_.indexname_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchRequest::_internal_mutable_indexname() {
  ;
  return _impl_.indexname_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchRequest::release_indexname() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.SearchRequest.indexName)
  return _impl_.indexname_.Release();
}
inline void SearchRequest::set_allocated_indexname(std::string* value) {
  _impl_.indexname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.indexname_.IsDefault()) {
          _impl_.indexname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.SearchRequest.indexName)
}

// uint32 numQueryVectors = 2;
inline void SearchRequest::clear_numqueryvectors() {
  _impl_.numqueryvectors_ = 0u;
}
inline ::uint32_t SearchRequest::numqueryvectors() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchRequest.numQueryVectors)
  return _internal_numqueryvectors();
}
inline void SearchRequest::set_numqueryvectors(::uint32_t value) {
  _internal_set_numqueryvectors(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchRequest.numQueryVectors)
}
inline ::uint32_t SearchRequest::_internal_numqueryvectors() const {
  return _impl_.numqueryvectors_;
}
inline void SearchRequest::_internal_set_numqueryvectors(::uint32_t value) {
  ;
  _impl_.numqueryvectors_ = value;
}

// uint32 dim = 3;
inline void SearchRequest::clear_dim() {
  _impl_.dim_ = 0u;
}
inline ::uint32_t SearchRequest::dim() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchRequest.dim)
  return _internal_dim();
}
inline void SearchRequest::set_dim(::uint32_t value) {
  _internal_set_dim(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchRequest.dim)
}
inline ::uint32_t SearchRequest::_internal_dim() const {
  return _impl_.dim_;
}
inline void SearchRequest::_internal_set_dim(::uint32_t value) {
  ;
  _impl_.dim_ = value;
}

// repeated float vecData = 4;
inline int SearchRequest::_internal_vecdata_size() const {
  return _impl_.vecdata_.size();
}
inline int SearchRequest::vecdata_size() const {
  return _internal_vecdata_size();
}
inline void SearchRequest::clear_vecdata() {
  _internal_mutable_vecdata()->Clear();
}
inline float SearchRequest::vecdata(int index) const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchRequest.vecData)
  return _internal_vecdata(index);
}
inline void SearchRequest::set_vecdata(int index, float value) {
  _internal_mutable_vecdata()->Set(index, value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchRequest.vecData)
}
inline void SearchRequest::add_vecdata(float value) {
  _internal_add_vecdata(value);
  // @@protoc_insertion_point(field_add:vecsearchgrpc.SearchRequest.vecData)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& SearchRequest::vecdata() const {
  // @@protoc_insertion_point(field_list:vecsearchgrpc.SearchRequest.vecData)
  return _internal_vecdata();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* SearchRequest::mutable_vecdata() {
  // @@protoc_insertion_point(field_mutable_list:vecsearchgrpc.SearchRequest.vecData)
  return _internal_mutable_vecdata();
}

inline float SearchRequest::_internal_vecdata(int index) const {
  return _internal_vecdata().Get(index);
}
inline void SearchRequest::_internal_add_vecdata(float value) {
  _internal_mutable_vecdata()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& SearchRequest::_internal_vecdata() const {
  return _impl_.vecdata_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* SearchRequest::_internal_mutable_vecdata() {
  return &_impl_.vecdata_;
}

// uint32 numNeighbors = 5;
inline void SearchRequest::clear_numneighbors() {
  _impl_.numneighbors_ = 0u;
}
inline ::uint32_t SearchRequest::numneighbors() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchRequest.numNeighbors)
  return _internal_numneighbors();
}
inline void SearchRequest::set_numneighbors(::uint32_t value) {
  _internal_set_numneighbors(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchRequest.numNeighbors)
}
inline ::uint32_t SearchRequest::_internal_numneighbors() const {
  return _impl_.numneighbors_;
}
inline void SearchRequest::_internal_set_numneighbors(::uint32_t value) {
  ;
  _impl_.numneighbors_ = value;
}

// -------------------------------------------------------------------

// SearchReply

// string status = 1;
inline void SearchReply::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& SearchReply::status() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchReply.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchReply::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchReply.status)
}
inline std::string* SearchReply::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.SearchReply.status)
  return _s;
}
inline const std::string& SearchReply::_internal_status() const {
  return _impl_.status_.Get();
}
inline void SearchReply::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchReply::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchReply::release_status() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.SearchReply.status)
  return _impl_.status_.Release();
}
inline void SearchReply::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.SearchReply.status)
}

// string message = 2;
inline void SearchReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& SearchReply::message() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SearchReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchReply.message)
}
inline std::string* SearchReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.SearchReply.message)
  return _s;
}
inline const std::string& SearchReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void SearchReply::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* SearchReply::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* SearchReply::release_message() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.SearchReply.message)
  return _impl_.message_.Release();
}
inline void SearchReply::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.SearchReply.message)
}

// uint32 numQueryVectors = 3;
inline void SearchReply::clear_numqueryvectors() {
  _impl_.numqueryvectors_ = 0u;
}
inline ::uint32_t SearchReply::numqueryvectors() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchReply.numQueryVectors)
  return _internal_numqueryvectors();
}
inline void SearchReply::set_numqueryvectors(::uint32_t value) {
  _internal_set_numqueryvectors(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchReply.numQueryVectors)
}
inline ::uint32_t SearchReply::_internal_numqueryvectors() const {
  return _impl_.numqueryvectors_;
}
inline void SearchReply::_internal_set_numqueryvectors(::uint32_t value) {
  ;
  _impl_.numqueryvectors_ = value;
}

// uint32 numNeighbors = 4;
inline void SearchReply::clear_numneighbors() {
  _impl_.numneighbors_ = 0u;
}
inline ::uint32_t SearchReply::numneighbors() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchReply.numNeighbors)
  return _internal_numneighbors();
}
inline void SearchReply::set_numneighbors(::uint32_t value) {
  _internal_set_numneighbors(value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchReply.numNeighbors)
}
inline ::uint32_t SearchReply::_internal_numneighbors() const {
  return _impl_.numneighbors_;
}
inline void SearchReply::_internal_set_numneighbors(::uint32_t value) {
  ;
  _impl_.numneighbors_ = value;
}

// repeated uint32 I = 5;
inline int SearchReply::_internal_i_size() const {
  return _impl_.i_.size();
}
inline int SearchReply::i_size() const {
  return _internal_i_size();
}
inline void SearchReply::clear_i() {
  _internal_mutable_i()->Clear();
}
inline ::uint32_t SearchReply::i(int index) const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchReply.I)
  return _internal_i(index);
}
inline void SearchReply::set_i(int index, ::uint32_t value) {
  _internal_mutable_i()->Set(index, value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchReply.I)
}
inline void SearchReply::add_i(::uint32_t value) {
  _internal_add_i(value);
  // @@protoc_insertion_point(field_add:vecsearchgrpc.SearchReply.I)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& SearchReply::i() const {
  // @@protoc_insertion_point(field_list:vecsearchgrpc.SearchReply.I)
  return _internal_i();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* SearchReply::mutable_i() {
  // @@protoc_insertion_point(field_mutable_list:vecsearchgrpc.SearchReply.I)
  return _internal_mutable_i();
}

inline ::uint32_t SearchReply::_internal_i(int index) const {
  return _internal_i().Get(index);
}
inline void SearchReply::_internal_add_i(::uint32_t value) {
  _internal_mutable_i()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>& SearchReply::_internal_i() const {
  return _impl_.i_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::uint32_t>* SearchReply::_internal_mutable_i() {
  return &_impl_.i_;
}

// repeated float D = 6;
inline int SearchReply::_internal_d_size() const {
  return _impl_.d_.size();
}
inline int SearchReply::d_size() const {
  return _internal_d_size();
}
inline void SearchReply::clear_d() {
  _internal_mutable_d()->Clear();
}
inline float SearchReply::d(int index) const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.SearchReply.D)
  return _internal_d(index);
}
inline void SearchReply::set_d(int index, float value) {
  _internal_mutable_d()->Set(index, value);
  // @@protoc_insertion_point(field_set:vecsearchgrpc.SearchReply.D)
}
inline void SearchReply::add_d(float value) {
  _internal_add_d(value);
  // @@protoc_insertion_point(field_add:vecsearchgrpc.SearchReply.D)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& SearchReply::d() const {
  // @@protoc_insertion_point(field_list:vecsearchgrpc.SearchReply.D)
  return _internal_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* SearchReply::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:vecsearchgrpc.SearchReply.D)
  return _internal_mutable_d();
}

inline float SearchReply::_internal_d(int index) const {
  return _internal_d().Get(index);
}
inline void SearchReply::_internal_add_d(float value) {
  _internal_mutable_d()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>& SearchReply::_internal_d() const {
  return _impl_.d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<float>* SearchReply::_internal_mutable_d() {
  return &_impl_.d_;
}

// -------------------------------------------------------------------

// DefaultRequest

// string indexName = 1;
inline void DefaultRequest::clear_indexname() {
  _impl_.indexname_.ClearToEmpty();
}
inline const std::string& DefaultRequest::indexname() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.DefaultRequest.indexName)
  return _internal_indexname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultRequest::set_indexname(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.indexname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.DefaultRequest.indexName)
}
inline std::string* DefaultRequest::mutable_indexname() {
  std::string* _s = _internal_mutable_indexname();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.DefaultRequest.indexName)
  return _s;
}
inline const std::string& DefaultRequest::_internal_indexname() const {
  return _impl_.indexname_.Get();
}
inline void DefaultRequest::_internal_set_indexname(const std::string& value) {
  ;


  _impl_.indexname_.Set(value, GetArenaForAllocation());
}
inline std::string* DefaultRequest::_internal_mutable_indexname() {
  ;
  return _impl_.indexname_.Mutable( GetArenaForAllocation());
}
inline std::string* DefaultRequest::release_indexname() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.DefaultRequest.indexName)
  return _impl_.indexname_.Release();
}
inline void DefaultRequest::set_allocated_indexname(std::string* value) {
  _impl_.indexname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.indexname_.IsDefault()) {
          _impl_.indexname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.DefaultRequest.indexName)
}

// -------------------------------------------------------------------

// DefaultReply

// string status = 1;
inline void DefaultReply::clear_status() {
  _impl_.status_.ClearToEmpty();
}
inline const std::string& DefaultReply::status() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.DefaultReply.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultReply::set_status(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.DefaultReply.status)
}
inline std::string* DefaultReply::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.DefaultReply.status)
  return _s;
}
inline const std::string& DefaultReply::_internal_status() const {
  return _impl_.status_.Get();
}
inline void DefaultReply::_internal_set_status(const std::string& value) {
  ;


  _impl_.status_.Set(value, GetArenaForAllocation());
}
inline std::string* DefaultReply::_internal_mutable_status() {
  ;
  return _impl_.status_.Mutable( GetArenaForAllocation());
}
inline std::string* DefaultReply::release_status() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.DefaultReply.status)
  return _impl_.status_.Release();
}
inline void DefaultReply::set_allocated_status(std::string* value) {
  _impl_.status_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.status_.IsDefault()) {
          _impl_.status_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.DefaultReply.status)
}

// string message = 2;
inline void DefaultReply::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& DefaultReply::message() const {
  // @@protoc_insertion_point(field_get:vecsearchgrpc.DefaultReply.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DefaultReply::set_message(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.message_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:vecsearchgrpc.DefaultReply.message)
}
inline std::string* DefaultReply::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:vecsearchgrpc.DefaultReply.message)
  return _s;
}
inline const std::string& DefaultReply::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DefaultReply::_internal_set_message(const std::string& value) {
  ;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DefaultReply::_internal_mutable_message() {
  ;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* DefaultReply::release_message() {
  // @@protoc_insertion_point(field_release:vecsearchgrpc.DefaultReply.message)
  return _impl_.message_.Release();
}
inline void DefaultReply::set_allocated_message(std::string* value) {
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:vecsearchgrpc.DefaultReply.message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace vecsearchgrpc


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_vecsearch_2eproto_2epb_2eh
